/**
 * Copyright Â© 2014, Oracle and/or its affiliates. All rights reserved.
 *
 * JDK 8 MOOC Lesson 3 homework
 */
package com.raulavila.lesson3;

import java.io.IOException;
import java.util.Comparator;
import java.util.List;
import java.util.function.Supplier;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import static java.util.Comparator.reverseOrder;
import static java.util.stream.Collectors.toList;

/**
 * @author Simon Ritter (@speakjava)
 * @author Stuart Marks
 */
public class Lesson3 {
  /* How many times to repeat the test.  5 seems to give reasonable results */
  private static final int RUN_COUNT = 5;
  
  /**
   * Used by the measure method to determine how long a Supplier takes to
   * return a result.
   *
   * @param <T> The type of the result provided by the Supplier
   * @param label Description of what's being measured
   * @param supplier The Supplier to measure execution time of
   * @return
   */
  static <T> T measureOneRun(String label, Supplier<T> supplier) {
    long startTime = System.nanoTime();
    T result = supplier.get();
    long endTime = System.nanoTime();
    System.out.printf("%s took %dms%n",
        label, (endTime - startTime + 500_000L) / 1_000_000L);
    return result;
  }

  /**
   * Repeatedly generate results using a Supplier to eliminate some of the
   * issues of running a micro-benchmark.
   *
   * @param <T> The type of result generated by the Supplier
   * @param label Description of what's being measured
   * @param supplier The Supplier to measure execution time of
   * @return The last execution time of the Supplier code
   */
  static <T> T measure(String label, Supplier<T> supplier) {
    T result = null;

    for (int i = 0; i < RUN_COUNT; i++)
      result = measureOneRun(label, supplier);

    return result;
  }

  /**
   * Computes the Levenshtein distance between every pair of words in the
   * subset, and returns a matrix of distances. This actually computes twice as
   * much as it needs to, since for every word a, b it should be the case that
   * lev(a,b) == lev(b,a) i.e., Levenshtein distance is commutative.
   *
   * @param wordList The subset of words whose distances to compute
   * @param parallel Whether to run in parallel
   * @return Matrix of Levenshtein distances
   */
  static int[][] computeLevenshtein(List<String> wordList, boolean parallel) {
    final int LIST_SIZE = wordList.size();
    int[][] distances = new int[LIST_SIZE][LIST_SIZE];

    IntStream stream = IntStream.range(0, LIST_SIZE);

    if (parallel) {
      stream.parallel();
    }
    
    stream
      .mapToObj(i -> i)
      .flatMap(i ->
          IntStream.range(0, LIST_SIZE)
                  .mapToObj(j -> new int[] {i, j})
        )
        .forEach(idx -> distances[idx[0]][idx[1]] = Levenshtein.lev(wordList.get(idx[0]), wordList.get(idx[1])));

//    stream
//            .mapToObj(j -> new int[]{j / LIST_SIZE, j % LIST_SIZE})
//            .forEach(a -> distances[a[0]][a[1]] = Levenshtein.lev(wordList.get(a[0]), wordList.get(a[1])));
    
    return distances;
  }
  
  /**
   * Process a list of random strings and return a modified list
   * 
   * @param wordList The subset of words whose distances to compute
   * @param parallel Whether to run in parallel
   * @return The list processed in whatever way you want
   */
  static List<String> processWords(List<String> wordList, boolean parallel) {
    return wordList.stream()
            .sorted(reverseOrder())
            .map(String::toLowerCase)
            .filter(s -> s.startsWith("a"))
            .peek(System.out::println)
            .collect(toList());
  }

  /**
   * Main entry point for application
   *
   * @param args the command line arguments
   * @throws java.io.IOException If word file cannot be read
   */
  public static void main(String[] args) throws Exception {
    RandomWords fullWordList = new RandomWords();
    List<String> wordList = fullWordList.createList(10);

    measure("Sequential", () -> computeLevenshtein(wordList, false));
    measure("Parallel", () -> computeLevenshtein(wordList, true));
    
//    measure("Sequential", () -> processWords(wordList, false));
//    measure("Parallel", () -> processWords(wordList, true));
  }
}